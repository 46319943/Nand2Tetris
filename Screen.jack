// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;

    /** Initializes the Screen. */
    function void init() {

    }

    /** Erases the entire screen. */
    function void clearScreen() {
        Screen.drawRectangle(0, 0, 512, 256);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // 512 columns, 256 rows.
        // 512 bit per row, 32 address per row
        var int address, value, bit;
        let address = (x / 16) + (y * 32);
        let value = Memory.peek(16384 + address);
        // bit of value
        let bit = x - ( x / 16);
        if(color){
            let value = value | Matn.getTwoToThe(bit);
        }
        else{
            let value = value & (~Matn.getTwoToThe(bit));
        }
        Memory.poke(address, value);
        
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, x, y, dx, dy, diff;
        let a = 0;
        let b = 0;
        
        // generalize for any direction
        let x = Math.min(x1, x2);
        let y = Math.min(y1, y2)
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        
        // horizontal and vertical special cases
        if(dx = 0){
            while(~(b>dy)){
                Screen.drawPixel(x, y + b);
                let b = b + 1;
            }
            return;
        }
        if(dy = 0){
            while(~(a>dx)){
                Screen.drawPixel(x + a, y);
                let a = a + 1;
            }
            return;
        }
        
        // common case
        let diff = 0;
        while( (~(a>dx)) & (~(b>dy)) ){
            Screen.drawPixel(x + a, y + b);
            if (diff < 0){
                let a = a + 1;
                let diff = diff + dy;
            }
            else{
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, b;
        let b = 0;
        
        let x = Math.min(x1, x2);
        let y = Math.min(y1, y2);
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);
        
        while(~(b>dy)){
            Screen.drawLine(x, y+b, x+dx, y+b);
            let b = b + 1;
        }
        
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = -r;
        while(~(dy > r)){
            // handling 
            Screen.drawLine(
                Math.max(0, x - Math.sqrt((r*r) - (dy*dy))),
                Math.min(512, Math.max(0, y + dy)),
                Math.min(512, x + Math.sqrt((r*r) - (dy*dy))),
                Math.min(512, Math.max(0, y + dy))
            )
            let dy = dy + 1;
        }
    
    }
}
