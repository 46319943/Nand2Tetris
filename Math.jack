class Math {
    // the i'th bit is one
    static Array twoToThe;
    
    // init twoToThe Array
    function void init(){        
        var int i, singleBitValue;
        let i = 0;
        let singleBitValue = 1;
        let twoToThe = Array.new(16);
        while( i < 16 ){
            let twoToThe[i] = singleBitValue;
            
            // bit left shifting
            let singleBitValue = singleBitValue + singleBitValue;
            
            let i = i + 1;
        }
    }
    
    // Returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i){
        return ~((x & twoToThe[i]) = 0);
    }

    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        
        while( i < 16 ){
            if( bit(y, i) ){
                let sum = sum + shiftedX;
            }
            
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        
        return sum;
    }
    
    // Returns the integer part of x / y, 
    // where x ≥ 0 and y > 0
    function int divide(int x, int y){
        // 从结果的第一位开始，往左边位递归，逐位求结果
        // 结果最左边的一位最先返回，直到递归返回到第一位
    
        var int sum;
        if(x < y){
            return 0;
        }
        // 上一位（左边/高一位）的除法结果
        let sum = Math.divide(x, 2 * y);
        
        if((x - 2*y * sum) < y){
            return 2*sum;
        }
        else{
            return (2*sum) + 1;
        }
    }
    
    // Compute the *integer* part of sqrt(x)
    // Strategy: find an integer y such that 
    // y^2 <= x < (y+1)^2 (for 0 <= x < 2^n)
    // by performing a binary search in the range 0...2^(n/2)-1
    function int sqrt(int x){
        var int y;
        let y = 0;
        
    }
}